{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/movies/movies.component.css","webpack:///./src/app/movies/movies.component.html","webpack:///./src/app/movies/movies.component.ts","webpack:///./src/app/novels/novels.component.css","webpack:///./src/app/novels/novels.component.html","webpack:///./src/app/novels/novels.component.ts","webpack:///./src/app/user/user.component.css","webpack:///./src/app/user/user.component.html","webpack:///./src/app/user/user.component.ts","webpack:///./src/dstructures/result.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/services/config.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n<div class=\\\"row\\\">\\n\\n<div class=\\\"col-sm-10\\\" style=\\\"margin-top:20px\\\">\\n\\t<router-outlet></router-outlet>\\n\\t \\n</div>\\n</div>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'mybinge';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { MoviesComponent } from './movies/movies.component';\nimport { NovelsComponent } from './novels/novels.component';\nimport { UserComponent } from './user/user.component';\n/*COMPONENTS*/\n\n/*SERVICES*/\nimport { ConfigService } from '../services/config.service';\n\n/*BOOTSTRAP*/\nimport { NgbRating } from '@ng-bootstrap/ng-bootstrap';\n\nconst routes: Routes = [\n  {\n    path:'novels', \n    component: NovelsComponent\n  },\n  {\n  \tpath:'in-movies',\n  \tcomponent: MoviesComponent\n  }\n  ]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\tNgbRating,\n    MoviesComponent,\n    NovelsComponent,\n    UserComponent\n  ],\n  imports: [\n    BrowserModule,\n\tReactiveFormsModule,\n    RouterModule.forRoot(routes)\n  ],\n  providers: [\n  ConfigService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<p>\\n  movies works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.css']\n})\nexport class MoviesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".joy{\\r\\n\\tfont-size:25px;\\r\\n}\"","module.exports = \"<form [formGroup]='newNovelForm' (ngSubmit)='submit(newNovelForm)'>\\n  <div class=\\\"row form-group col-lg-10\\\">\\n    <label>Title of the novel:</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\">\\n  </div>\\n  \\n  <div class=\\\"row form-group col-lg-10\\\">\\n    <label>Author: </label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"author\\\">\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n  <div class=\\\"form-group col-lg-6\\\">\\n    <label>When did you start reading? </label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"startDate\\\">\\n  </div>\\n  \\n  <div class=\\\"form-group col-lg-6\\\">\\n    <label>Completed By: </label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"endDate\\\">\\n  </div>\\n  \\n  </div>\\n\\n  \\n  <div class=\\\"row form-group col-lg-10\\\">\\n    <label>Comments: </label>\\n    <textarea class=\\\"form-control\\\" formControlName=\\\"comments\\\"></textarea>\\n  </div>\\n  \\n   <div class=\\\"form-group\\\">\\n    <label>Your Experience: </label><br/>\\n    <ngb-rating [(rate)]=\\\"currentRate\\\" class=\\\"joy\\\" formControlName=\\\"rating\\\" ></ngb-rating>\\n\\t<hr>\\n\\t<pre>Rate: <b>{{currentRate}}</b></pre>\\n  </div>\\n  \\n  <div formArrayName=\\\"quotes\\\">\\n    <div *ngFor=\\\"let item of Quotes.controls; let quoteIndex=index\\\" [formGroupName]=\\\"quoteIndex\\\">\\n\\t  <div class=\\\"row form-group\\\">\\n\\t\\t<div class=\\\"col-lg-3\\\">\\n\\t\\t\\t<label>Page: </label><input formControlName=\\\"page\\\" class=\\\"form-control\\\" placeholder=\\\"Page number\\\" type=\\\"text\\\" />\\n\\t\\t</div>\\n\\t\\t<div class=\\\"col-lg-7\\\">\\n\\t\\t\\t<label>Quote:</label><input formControlName=\\\"takeaway\\\" class=\\\"form-control\\\" placeholder=\\\"Take Away\\\" type=\\\"text\\\" />\\n\\t\\t</div>\\n\\t\\t<div class=\\\"col-lg-2\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"deleteQuotes(quoteIndex)\\\">Delete</button>\\n\\t\\t</div>\\n      </div>\\n\\t</div>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"addQuotes()\\\">Add Another Quote</button>\\n  </div>\\n\\n  \\n  <br/> <br/> <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\\n\\t<span *ngIf=\\\"result.type!='untouched'\\\">{{result.msg}}</span>\"","import { Component, OnInit, OnChanges } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, NgForm, FormArray } from '@angular/forms';\nimport { Result } from '../../dstructures/result';\n//import { Quotes, Takeaway } from '../../dstructures/quotes';\n\nimport { ConfigService } from '../../services/config.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-novels',\n  templateUrl: './novels.component.html',\n  styleUrls: ['./novels.component.css']\n})\nexport class NovelsComponent implements OnInit {\n\tcurrentRate = 0;\n\tresult:Result;\n\tisEdit:boolean = false;\n\tid: string;\n\tnewNovelForm:FormGroup;\n\trating:any;\n\t\n  constructor(private formbuilder: FormBuilder,\n\t\t\tprivate configSvc: ConfigService,\n\t\t\tprivate actRouter: ActivatedRoute,\n\t\t\tprivate router:Router) {\n\t\t\t\n\t\t\tthis.result= new Result();\n\t\t\tthis.newNovelForm= formbuilder.group({\n\t\t\t\t\n\t\t\t\ttitle: new FormControl(),\n\t\t\t\tauthor: new FormControl(),\n\t\t\t\tcomments: new FormControl(),\n\t\t\t\trating: new FormControl(),\n\t\t\t\tstartDate: new FormControl(),\n\t\t\t\tendDate: new FormControl(),\n\t\t\t\tquotes: this.formbuilder.array([this.formbuilder.group({takeaway:'', page:''})]),\n\t\t\t\t\n\t\t\t});\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\tget Quotes() {\n\t\treturn this.newNovelForm.get('quotes') as FormArray;\n\t}\n  \n\taddQuotes() {\n\t\tthis.Quotes.push(this.formbuilder.group({takeaway:'',page:''}));\n\t}\n\n\tdeleteQuotes(index) {\n\t\tthis.Quotes.removeAt(index);\n\t}\n  \n\n  ngOnInit() {\n\t\n\t  if(this.router.url.includes('/edit/')){\n\t\t  /*this.isEdit=true;\n\t\t  this.id=this.actRouter.snapshot.paramMap.get('id');\n\t\t  if(this.id.match(/^[a-zA-Z0-9]+$/)==null){\n\t\t\t  //NOT A VALID ID, REDIRECT TO 404  \n\t\t  }\n\t\telse {   \n\t\t  this.configSvc.get(this.id).subscribe(\n\t\t  (data)=>{\n\t\t\t\t\tthis.result=data;\n\t\t\t\t\tif(this.result.type=='success'){\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.newNovelForm.setValue({\n\t\t\t\t\t\t\t\ttitle: this.result.data.title,\n\t\t\t\t\t\t\t\tauthor: this.result.data.author,\n\t\t\t\t\t\t\t\tcomments: this.result.data.comments,\n\t\t\t\t\t\t\t\trating: this.result.data.ratings,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t  }\n\t\t  (err)=>{ console.log(`${err}`);}\n\t\t  ); \n\t\t}\n\t  */\n\t  }\n  }\n\n  submit(forM){\n\t   console.log(forM.value);\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  user works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","\texport class Result {\n\ttype: string ;\n\tmsg:  string ;\n\tdata: any;\n\t\n  constructor(type: string = 'untouched', msg: string = '...', data: any = null ) {\n    this.type = type;\n    this.msg = msg;\n    this.data = data;\n\t\n  } \n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  constructor() { }\n}\n"],"sourceRoot":""}